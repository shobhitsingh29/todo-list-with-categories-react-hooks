{"version":3,"sources":["components/Filters/index.js","components/TodoItem/index.js","mocked.js","App.js","serviceWorker.js","index.js"],"names":["Filters","props","todos","changeFilter","currentCategory","uniqueSetOfCategories","Set","map","todo","category","optionsJSX","forEach","push","key","value","className","onChange","event","target","handleChangeCategory","TodoItem","toggleIsCompleted","deleteTodo","editTodo","refer","useRef","id","type","checked","isDone","readOnly","onClick","description","style","placeholder","ref","e","current","initialTodos","App","useState","setTodos","filteredTodos","setFilteredTodos","descriptionQuery","setDescriptionQuery","categoryQuery","setCategoryQuery","setCurrentCategory","useEffect","filterTodos","tempTodos","currentTodo","find","filterTODO","filter","val","newTODO","allTodoItems","TodoListJSX","role","aria-label","length","uuidv4","selectedCategory","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.19e5d335.chunk.js","sourcesContent":["import React from 'react';\n\nexport const Filters = (props) => {\n\n    const {todos, changeFilter, currentCategory} = props;\n\n    const uniqueSetOfCategories = new Set(todos?.map(todo => todo.category));\n\n    let optionsJSX = [];\n\n    uniqueSetOfCategories.forEach((category) => {\n        optionsJSX.push(<option key={category} value={category}>{category}</option>);\n    });\n\n    const handleChangeCategory = event => {\n        changeFilter(event.target.value);\n    };\n\n    return (\n        <div className='App'>\n            <select onChange={(event) => handleChangeCategory(event)} value={currentCategory}>\n                {optionsJSX}\n            </select>\n        </div>\n    );\n};\n","import React, {useRef} from 'react';\n\nexport const TodoItem = (props) => {\n    const {todo, toggleIsCompleted, deleteTodo, editTodo} = props;\n    const refer = useRef('');\n\n    const handleOnchange = (e) => {\n\n        refer.current = e.target.value;\n\n    };\n    return (\n        <li key={todo.id}>\n            <input type='checkbox'\n                   checked={todo.isDone}\n                   readOnly\n                   onClick={() => toggleIsCompleted(todo.id)}\n            />\n            {todo.isDone\n                ?\n                <strike>{todo.description + ' ' + todo.category}</strike>\n                :\n                todo.description + ' ' + todo.category}\n\n            {<input style={{'width': '300px'}} placeholder='add new descrip`n here & hit->‚úçÔ∏èÔ∏è' type='text' ref={refer}\n                    onChange={handleOnchange}/>}\n            {<span style={{'cursor': 'pointer'}}\n                   onClick={() => editTodo(todo.id, refer.current)}>&nbsp; &nbsp; ‚úçÔ∏èÔ∏è </span>}\n            {<span style={{'cursor': 'pointer'}} onClick={() => deleteTodo(todo.id)}>&nbsp; &nbsp; üóëÔ∏è</span>}\n        </li>\n    );\n};\n","export const initialTodos = [\n    {\n        id: 'ea47ca06-afcb-46ac-953b-d7211a5db98a',\n        description: 'Laundry',\n        category: 'Home',\n        isDone: false,\n    },\n    {\n        id: '520a8762-0d0c-4c07-a5a0-c05701d740a1',\n        description: 'Make a presentation',\n        category: 'Office',\n        isDone: true,\n    },\n    {\n        id: '520a8762-0d0c-4c07-a5a0-c05701d740a2',\n        description: 'Do the release`',\n        category: 'Office',\n        isDone: false,\n    },\n];","import React, {useEffect, useState} from 'react';\nimport {Filters} from './components/Filters';\nimport {v4 as uuidv4} from 'uuid';\nimport {TodoItem} from './components/TodoItem';\nimport {initialTodos} from './mocked';\nimport './App.css';\n\nconst App = () => {\n\n    const [todos, setTodos] = useState(initialTodos);\n    const [filteredTodos, setFilteredTodos] = useState(initialTodos);\n    const [descriptionQuery, setDescriptionQuery] = useState('');\n    const [categoryQuery, setCategoryQuery] = useState('Office');\n    const [currentCategory, setCurrentCategory] = useState('Office');\n\n    useEffect(() => {\n        setFilteredTodos(filterTodos(todos, currentCategory));\n    }, [currentCategory, todos]);\n\n    const addTodo = () => {\n        if (descriptionQuery.length > 0 && categoryQuery.length > 0) {\n            setDescriptionQuery('');\n            setTodos([...todos, {id: uuidv4(), description: descriptionQuery, category: categoryQuery, isDone: false}]);\n            filterTodos(todos, currentCategory)\n        }\n    };\n\n    const toggleIsCompleted = (id) => {\n\n        const tempTodos = [...todos];\n        const currentTodo = tempTodos.find(todo => todo.id === id);\n        currentTodo.isDone = !currentTodo.isDone;\n        setTodos(tempTodos);\n    };\n\n    const deleteTodo = (id) => {\n        const tempTodos = [...todos];\n        const filterTODO = tempTodos.filter(todo => todo.id !== id);\n        setTodos(filterTODO);\n    };\n\n    const editTodo = (id, val) => {\n        const tempTodos = [...todos];\n        const newTODO = tempTodos.map(todo => {\n\n            if (todo.id === id) {\n                todo.description = val;\n            }\n            return todo;\n        });\n        setTodos(newTODO);\n    };\n\n\n    const changeFilter = (selectedCategory) => {\n        setCurrentCategory(selectedCategory);\n    };\n\n    const filterTodos = (allTodoItems, currentCategory) => {\n        return allTodoItems.filter(todo => todo.category === currentCategory);\n    };\n\n    const TodoListJSX = filteredTodos.map(todo =>\n        <TodoItem\n            key={todo.id}\n            todo={todo}\n            toggleIsCompleted={toggleIsCompleted}\n            deleteTodo={deleteTodo}\n            editTodo={editTodo}\n        />);\n\n    return (\n        <div className='App'>\n            <section className='column'>\n                <h1>Todo</h1>\n                <ul>{TodoListJSX}</ul>\n                <div className='add-item'>\n                    <input value={descriptionQuery} onChange={e => setDescriptionQuery(e.target.value)}\n                           placeholder='add a task...'/>\n                    <input value={categoryQuery} onChange={e => setCategoryQuery(e.target.value)}/>\n                    <span role=\"img\" aria-label=\"+\" className='plus' onClick={() => addTodo()}> ‚ûï</span>\n                </div>\n            </section>\n            <section className='column'>\n                <Filters\n                    todos={todos}\n                    changeFilter={changeFilter}\n                    currentCategory={currentCategory}\n                />\n            </section>\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}